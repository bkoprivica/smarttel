name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 11

      - name: Build Customer Service
        run: |
          cd customer-service
          mvn clean package -DskipTests

      - name: Build Billing Service
        run: |
          cd billing-service
          mvn clean package -DskipTests

      - name: Build Notification Service
        run: |
          cd notification-service
          mvn clean package -DskipTests

      - name: Build API Gateway
        run: |
          cd api-gateway
          mvn clean package -DskipTests

      - name: Build Docker Images
        run: |
          docker build -t ghcr.io/bkoprivica/customer-service:latest ./customer-service
          docker build -t ghcr.io/bkoprivica/billing-service:latest ./billing-service
          docker build -t ghcr.io/bkoprivica/notification-service:latest ./notification-service
          docker build -t ghcr.io/bkoprivica/api-gateway:latest ./api-gateway

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push Docker Images
        run: |
          docker push ghcr.io/bkoprivica/customer-service:latest
          docker push ghcr.io/bkoprivica/billing-service:latest
          docker push ghcr.io/bkoprivica/notification-service:latest
          docker push ghcr.io/bkoprivica/api-gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Configure External KUBECONFIG
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config

      - name: Install MetalLB
        run: |
          # Create namespace if not exists
          kubectl create namespace metallb-system || true
          # Download MetalLB manifest using curl and save it as metallb.yaml
          curl -L https://raw.githubusercontent.com/metallb/metallb/v0.13.10/config/manifests/metallb-native.yaml -o metallb.yaml
          # Apply the manifest with --validate=false to bypass OpenAPI validation errors
          kubectl apply -f metallb.yaml --validate=false
          # Configure MetalLB with the provided IP range (set METALLB_IP_RANGE in repo secrets)
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: ConfigMap
          metadata:
            namespace: metallb-system
            name: config
          data:
            config: |
              address-pools:
              - name: default
                protocol: layer2
                addresses:
                - "${{ secrets.METALLB_IP_RANGE }}"
          EOF

      - name: Deploy to Killercoda Kubernetes
        run: |
          kubectl apply -f k8s/
